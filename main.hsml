let x = 3 in (x + 5)

let factorial = \n -> (if (n == 0) then 1 else (n * (factorial (n - 1))))
in (factorial 12)

-- let x = 3 
-- in  
--     let y = (x + x) 
--     in  
--         let x = 5 
--         in y 
    

-- let z = 20 
-- in  
--     let f = (\y -> (y + z)) 
--     in let z = 30  
--         in (f 5) 
--
-- curry x = (\y -> (y + 5 )) 
-- (curry 5) 
--
-- curry x = (\y -> (y + 5 )) 
-- ((curry 0) 8) 
--
-- let two = \x -> (\y -> (x (x y))) 
-- in two 

-- curry x = (\x -> (\y -> (y + (5 + x)))) 
-- (((curry 5) 6) 7) 



-- let  
--     x = ((\x -> (x x)) (\x -> (x x))) 
-- in  
--     5 

-- (factorial 5) 

--     factorial 
-- factorial n = if (n == 0) then 1 else (n * (factorial (n - 1))) 
-- (5 + (factorial 3)) 

-- let z = (3 + 5) 
-- (factorial 10) 
-- (factorial 10) 
--
-- somebigcalculation x = if (x == 0) then 1 else (somebigcalculation (x - 1)) 
--
--
--
-- {- 
-- (factorial  
-- -- 5) 
-- 6) 
-- -} 
--
-- ((somebigcalculation 10000) + (somebigcalculation 10000)) 
-- (factorial 10) 
